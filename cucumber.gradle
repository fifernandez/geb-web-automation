import org.apache.commons.io.FileUtils
import net.masterthought.cucumber.ReportBuilder
import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "commons-io:commons-io:2.4"
        classpath "net.masterthought:cucumber-reporting:5.5.4"
    }
}

ext {
    geckoDriverVersion = '0.30.0'
    chromeDriverVersion = '100.0.4896.60'
    defaultBrowser = 'firefox'
    selectedBrowser = ''
    extractDir = ''
}

void setBrowser() {
    if (selectedBrowser == '') {
        if (project.hasProperty('env')) {
            selectedBrowser = project.env
        } else {
            selectedBrowser = defaultBrowser
            println "Environment not set!. Setting default to ${defaultBrowser}!"

        }
        println "Selected browser: ${selectedBrowser}!"
    }
}

String getDriversLocations() {
    switch (selectedBrowser) {
        case "chrome":
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                return "drivers/chromedriver.exe"
            } else if (Os.isFamily(Os.FAMILY_MAC)) {
                return "drivers/chromedriver"
            } else if (Os.isFamily(Os.FAMILY_UNIX)) {
                return "drivers/chromedriver"
            }
            break
        case "firefox":
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                return "drivers/geckodriver.exe"
            } else if (Os.isFamily(Os.FAMILY_MAC)) {
                return "drivers/geckodriver"
            } else if (Os.isFamily(Os.FAMILY_UNIX)) {
                return "drivers/geckodriver"
            }
            break
    }
}

task downloadGeckoDriver {
    def driverOsFilenamePart = ''
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        driverOsFilenamePart = Os.isArch("x86_64") ? "win32.zip" : "win64.zip"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        driverOsFilenamePart = 'macos.tar.gz'
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        driverOsFilenamePart = Os.isArch("amd64") ? "linux64.tar.gz" : "linux32.tar.gz"
    }
    def outputFile = file("$buildDir/webdriver/geckodriver-v${geckoDriverVersion}-${driverOsFilenamePart}")
    inputs.property("geckoDriverVersion", geckoDriverVersion)
    outputs.file(outputFile)
    doLast {
        String driverURL = "https://github.com/mozilla/geckodriver/releases/download/v${geckoDriverVersion}/geckodriver-v${geckoDriverVersion}-${driverOsFilenamePart}"
        println "Getting driver from: ${driverURL}"
        FileUtils.copyURLToFile(new URL(driverURL), outputFile)
        println 'Done downloading.'
    }
}

task getGeckoDriver(type: Copy) {
    setBrowser()
    if ((selectedBrowser == 'firefox') && (!file(getDriversLocations()).exists())) {
        println "Downloading gecko v${geckoDriverVersion}driver..."
        def outputDir = file("drivers/")
        dependsOn downloadGeckoDriver
        outputs.dir(outputDir)
        String expandFile = downloadGeckoDriver.outputs.files.singleFile
        if (expandFile.contains("zip")) {
            from(zipTree(downloadGeckoDriver.outputs.files.singleFile))
            into(outputDir)
        } else {
            from tarTree(downloadGeckoDriver.outputs.files.singleFile)
            into(outputDir)
        }
    }
}

task downloadChromeDriver {
    def outputFile = file("$buildDir/webdriver/chromedriver.zip")
    inputs.property("chromeDriverVersion", chromeDriverVersion)
    outputs.file(outputFile)
    doLast {
        def driverOsFilenamePart = ''
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            driverOsFilenamePart = "win32"
        } else if (Os.isFamily(Os.FAMILY_MAC)) {
            driverOsFilenamePart = Os.isArch("x86_64") ? "mac64" : "mac32"
        } else if (Os.isFamily(Os.FAMILY_UNIX)) {
            driverOsFilenamePart = Os.isArch("amd64") ? "linux64" : "linux32"
        }
        String driverURL = "http://chromedriver.storage.googleapis.com/${chromeDriverVersion}/chromedriver_${driverOsFilenamePart}.zip"
        println "Getting driver from: ${driverURL}"
        FileUtils.copyURLToFile(new URL(driverURL), outputFile)
        println 'Done downloading.'
    }
}

task getChromeDriver(type: Copy) {
    setBrowser()
    if (((selectedBrowser == 'chrome') && !file(getDriversLocations()).exists())) {
        println "Downloading chrome v${chromeDriverVersion}  driver..."
        def outputDir = file("drivers/")
        dependsOn downloadChromeDriver
        outputs.dir(outputDir)
        from(zipTree(downloadChromeDriver.outputs.files.singleFile))
        into(outputDir)
    }
}

task cucumber {
    dependsOn getGeckoDriver, getChromeDriver
    doLast {
        moveDriverFileToFolder()
        List<String> cucumberTags = parseTags()
        single(cucumberTags)
    }
}

String getDriversProperty() {
    switch (selectedBrowser) {
        case "chrome":
            return 'webdriver.chrome.driver'
            break
        case "firefox":
            return 'webdriver.gecko.driver'
            break
    }
}

void moveDriverFileToFolder() {
    if (((selectedBrowser != '') && !file(getDriversLocations()).exists()) && (extractDir != '')) {
        println "Moving the driver file!"
        ant.move file: extractDir, todir: "drivers/"
    }
}

void single(List<String> cucumberTags) {
    lunchCucumberCli(cucumberTags)
    generateReport()
}

void lunchCucumberCli(List<String> cucumberTags) {
    println "Running the tests!!"
    List<String> cucumberArgs = []
    cucumberArgs = ['--plugin', 'pretty',
                    '--plugin', "json:${reporting.baseDir}/cucumber.json",
                    '--plugin', "junit:${reporting.baseDir}/cucumber.xml",
                    '--plugin', "html:${reporting.baseDir}/Cucumber",
                    '--glue', 'support', 'src/test/resources/features',
    ]
    cucumberArgs.addAll(cucumberTags)
    try {
        javaexec {
            systemProperty getDriversProperty(), getDriversLocations()
            jvmArgs = ["-Dgeb.env=${selectedBrowser}"]
            main = "io.cucumber.core.cli.Main"
            classpath = sourceSets.test.runtimeClasspath
            args = cucumberArgs
        }
    }
    catch (Exception e) {
    }
}

List<String> parseTags() {
    List<String> result = []
    if (project.hasProperty('tags')) {
        result << '--tags '
        result << project.tags
    } else {
        println "No tags. Running for all!"
    }
    result << '--tags '
    result << 'not @ignore'
    return result
}

def generateReport() {
    println "Tests completed. Generating report...."
    File reportOutputDirectory = new File("${reporting.baseDir}/")
    def jsonReports = fileTree(dir: "${reporting.baseDir}/").include '**.json'.toString()
    List<String> jsonReportFiles = new ArrayList<String>()
    jsonReports.each { File file ->
        jsonReportFiles.add("${reporting.baseDir}/${file.name}".toString())
    }
    String title = "Basic Web Automation Report"
    net.masterthought.cucumber.Configuration configuration = new net.masterthought.cucumber.Configuration(reportOutputDirectory, title)
    ReportBuilder reportBuilder = new ReportBuilder(jsonReportFiles, configuration)
    reportBuilder.generateReports()
}
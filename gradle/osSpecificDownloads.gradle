import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.commons.io.FileUtils

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "commons-io:commons-io:2.4"
    }
}

ext {
    geckoDriverVersion = '0.24.0'
    chromeDriverVersion = '91.0.4472.101'
    defaultBrowser = 'firefox'
    selectedBrowser = ''
    extractDir = ''
}

void setBrowser(){
    if (selectedBrowser == '') {
        if (project.hasProperty('env')) {
            selectedBrowser = project.env
        } else {
            selectedBrowser = defaultBrowser
            println "Environment not set!. Setting default to ${defaultBrowser}!"

        }
        println "Selected browser: ${selectedBrowser}!"
    }
}

String getDriversLocations(){
    switch (selectedBrowser){
        case "chrome":
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                return "drivers/chromedriver.exe"
            } else if (Os.isFamily(Os.FAMILY_MAC)) {
                return "drivers/chromedriver"
            } else if (Os.isFamily(Os.FAMILY_UNIX)) {
                return "drivers/chromedriver"
            }
            break
        case "firefox":
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                return "drivers/geckodriver.exe"
            } else if (Os.isFamily(Os.FAMILY_MAC)) {
                return "drivers/geckodriver"
            } else if (Os.isFamily(Os.FAMILY_UNIX)) {
                return "drivers/geckodriver"
            }
            break
    }
}

task downloadGeckoDriver {
    def driverOsFilenamePart = ''
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        driverOsFilenamePart = Os.isArch("x86_64") ? "win32.zip" : "win64.zip"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        driverOsFilenamePart = 'macos.tar.gz'
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        driverOsFilenamePart = Os.isArch("amd64") ? "linux64.tar.gz" : "linux32.tar.gz"
    }
    def outputFile = file("$buildDir/webdriver/geckodriver-v${geckoDriverVersion}-${driverOsFilenamePart}")
    inputs.property("geckoDriverVersion", geckoDriverVersion)
    outputs.file(outputFile)
    doLast {
        String driverURL = "https://github.com/mozilla/geckodriver/releases/download/v${geckoDriverVersion}/geckodriver-v${geckoDriverVersion}-${driverOsFilenamePart}"
        println "Getting driver from: ${driverURL}"
        FileUtils.copyURLToFile(new URL(driverURL), outputFile)
        println 'Done downloading.'
    }
}

task getGeckoDriver(type: Copy) {
    setBrowser()
    if ((selectedBrowser == 'firefox') && (!file(getDriversLocations()).exists())) {
        println "Downloading gecko v${geckoDriverVersion}driver..."
        def outputDir = file("drivers/")
        dependsOn downloadGeckoDriver
        outputs.dir(outputDir)
        String expandFile = downloadGeckoDriver.outputs.files.singleFile
        if (expandFile.contains("zip")) {
            from(zipTree(downloadGeckoDriver.outputs.files.singleFile))
            into(outputDir)
        }
        else {
            from tarTree(downloadGeckoDriver.outputs.files.singleFile)
            into(outputDir)
        }
    }
}

task downloadChromeDriver {
    def outputFile = file("$buildDir/webdriver/chromedriver.zip")
    inputs.property("chromeDriverVersion", chromeDriverVersion)
    outputs.file(outputFile)
    doLast {
        def driverOsFilenamePart = ''
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            driverOsFilenamePart = "win32"
        } else if (Os.isFamily(Os.FAMILY_MAC)) {
            driverOsFilenamePart = Os.isArch("x86_64") ? "mac64" : "mac32"
        } else if (Os.isFamily(Os.FAMILY_UNIX)) {
            driverOsFilenamePart = Os.isArch("amd64") ? "linux64" : "linux32"
        }
        String driverURL = "http://chromedriver.storage.googleapis.com/${chromeDriverVersion}/chromedriver_${driverOsFilenamePart}.zip"
        println "Getting driver from: ${driverURL}"
        FileUtils.copyURLToFile(new URL(driverURL), outputFile)
        println 'Done downloading.'
    }
}

task getChromeDriver(type: Copy) {
    setBrowser()
    if (((selectedBrowser == 'chrome') && !file(getDriversLocations()).exists())) {
        println "Downloading chrome v${chromeDriverVersion}  driver..."
        def outputDir = file("drivers/")
        dependsOn downloadChromeDriver
        outputs.dir(outputDir)
        from(zipTree(downloadChromeDriver.outputs.files.singleFile))
        into(outputDir)
    }
}